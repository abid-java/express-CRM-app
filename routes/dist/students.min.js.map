{"version":3,"sources":["students.js"],"names":["express","require","Router","router","get","request","response","next","send","post","console","log","student","StudentModel","body","firstName","lastName","age","dob","department","status","description","successResponse","save","error","id","_id","students","find","studentsResponse","JSON","stringify","forEach","dbStudent","push","data","length","query","fName","resultsFound","module","exports"],"mappings":"aAAA,IAAAA,QAAAC,QAAA,WAEID,OAAOA,QAAUE,SACjBC,aAASH,QAAA,2BAIbG,OAAAC,IAAA,IAAA,SAAAC,EAAAC,EAAAC,GAEED,EAASE,KAAK,8BACfL,OAFDM,KAAA,UAAA,SAAAJ,EAAAC,EAAAC,GAIAG,QAAAC,IAAA,kBAAAN,GAGE,IAAIO,EAAU,IAAIC,aAAa,CAFjCV,UAAYE,EAAWS,KAAAC,UACrBL,SAAYL,EAAAS,KAAAE,SACZC,IAAIL,EAAUE,KAAID,IAChBE,IAAAA,EAAWV,KAAOa,IAClBF,WAAUX,EAAQS,KAAKE,aAGvBG,EAAoBL,CALtBM,OAAA,IAQAC,YAAIC,gCAAkBV,EAAtBW,KAAA,SAAAC,EAAAZ,GAKAA,EACEN,EAAWE,KAAAgB,IAAXd,QAEOC,IAAA,2EACLD,EAAYe,GAAAb,EAAAc,IACZJ,EAAAA,KAAAA,QAONnB,OAAOC,IAAI,QAAS,SAAUC,EAASC,EAAUC,GAAjDJ,IAAMwB,EAAK,GACLA,EAAQ,GACZd,aAAWe,KAAX,SAAAJ,EAAAK,GACAhB,EACEP,EAAWE,KAAAgB,IAAXd,QAEOC,IAAA,sCACLD,QAAQC,IAAImB,KAAAC,UAAAF,IACZnB,QAAQC,IAAImB,oCACZpB,EAAYsB,QAAA,SAAAC,GACZJ,EAAAA,IAAgBhB,aAAS,CACvBD,UAAUqB,EAAIpB,UACZE,SAASkB,EAAWjB,SACpBA,IAAAA,EAAUiB,IACVhB,IAAKgB,EAAUhB,IACfC,WAAKe,EAJoBd,aAAAQ,EAA3BO,KAAAtB,KAQDN,EATDE,KAAA,CAUAF,OAASE,IACPY,KAAMO,EACNQ,aAFYR,EAAAS,cAQpBjC,OAAAC,IAAA,gBAAA,SAAAC,EAAAC,EAAAC,GAEE,IAAIoB,EAAW,GADXf,EAAK,GACLe,EAAQtB,EAAZgC,MAAAtB,UACAF,aAAWe,KAAX,CAAAb,UAAAuB,GAAA,SAAAd,EAAAK,GACMS,EACNzB,EAAae,KAAKJ,IAAsBd,QAAAC,IAACa,sCACvCd,QAAAC,IAAWmB,KAAAC,UAAAF,IACTvB,QAAQK,IAACH,oCADXqB,EAEOG,QAAA,SAAAC,GACLvB,EAAY,IAAAG,aAAA,CACZH,UAAYoB,EAAKC,UACjBrB,SAAYuB,EAAAjB,SACZa,IAAAA,EAAiBG,IACfpB,IAAOqB,EAAOpB,IACZE,WAAWkB,EAAUlB,aAErBE,EAAKgB,KAAAA,KAELd,EAAAA,KAAU,CALeC,OAA3B,IAOAO,KAAAA,EARFY,aAAAZ,EAAAS,cAeDI,OAAAC,QAAAtC","file":"students.min.js","sourcesContent":["/*jshint esversion: 6 */\r\n\r\nvar express = require('express');\r\nvar router = express.Router();\r\n// var mongoose = require('mongoose');\r\nvar StudentModel = require('../models/student.model');\r\n\r\n/* GET students listing. */\r\nrouter.get('/', function (request, response, next) {\r\n  response.send('students route activated');\r\n});\r\n\r\n/* POST students */\r\nrouter.post('/create', function (request, response, next) {\r\n  console.log(\"Request Body : \", request);\r\n  let student = new StudentModel({\r\n    firstName: request.body.firstName,\r\n    lastName: request.body.lastName,\r\n    age: request.body.age,\r\n    dob: request.body.dob,\r\n    department: request.body.department\r\n  })\r\n\r\n  var successResponse = {\r\n    \"status\": 200,\r\n    \"description\": \"Student Created Successfully\",\r\n  };\r\n\r\n  student.save((error, student) => {\r\n    if (error) {\r\n      response.send(error);\r\n    } else {\r\n      console.log(\"<======= Overriding existing student_id with one freshly saved =======>\")\r\n      successResponse.id = student._id;\r\n      response.send(successResponse);\r\n    }\r\n  });\r\n});\r\n\r\n/* LIST students */\r\nrouter.get('/list', function (request, response, next) {\r\n  var students = [];\r\n  let student = {};\r\n  StudentModel.find((error, studentsResponse) => {\r\n    if (error) {\r\n      response.send(error);\r\n    } else {\r\n      console.log(\"<======= Students - Start =======>\");\r\n      console.log(JSON.stringify(studentsResponse));\r\n      console.log(\"<======= Students - End =======>\");\r\n      studentsResponse.forEach(dbStudent => {\r\n        student = new StudentModel({\r\n          firstName: dbStudent.firstName,\r\n          lastName: dbStudent.lastName,\r\n          age: dbStudent.age,\r\n          dob: dbStudent.dob,\r\n          department: dbStudent.department\r\n        })\r\n        students.push(student);\r\n      });\r\n      response.send({\r\n        status: 200,\r\n        data: students,\r\n        resultsFound: students.length});\r\n    }\r\n  });\r\n});\r\n\r\n/* GET students listing. */\r\nrouter.get('/searchByName', function (request, response, next) {\r\n  var students = [];\r\n  let student = {};\r\n  const fName = request.query.firstName;\r\n  StudentModel.find({ firstName: fName }, (error, studentsResponse) => {\r\n    if (error) {\r\n      response.send(error)\r\n    } else {\r\n      console.log(\"<======= Students - Start =======>\");\r\n      console.log(JSON.stringify(studentsResponse));\r\n      console.log(\"<======= Students - End =======>\");\r\n      studentsResponse.forEach(dbStudent => {\r\n        student = new StudentModel({\r\n          firstName: dbStudent.firstName,\r\n          lastName: dbStudent.lastName,\r\n          age: dbStudent.age,\r\n          dob: dbStudent.dob,\r\n          department: dbStudent.department\r\n        })\r\n        students.push(student);\r\n      });\r\n      response.send({\r\n        status: 200,\r\n        data: students,\r\n        resultsFound: students.length\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n"]}